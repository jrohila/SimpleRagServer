spring.application.name=SimpleRagServer
# application.properties
spring.ai.vectorstore.type=opensearch
spring.ai.vectorstore.opensearch.uris=http://localhost:9200
spring.ai.vectorstore.opensearch.username=admin
spring.ai.vectorstore.opensearch.password=MyAdm1n_Passw0rd!

spring.ai.vectorstore.opensearch.index-name=simple_rag_server
spring.ai.vectorstore.opensearch.initialize-schema=true
spring.ai.vectorstore.opensearch.similarity-function=cosinesimil
## OpenSearch connection for Spring AI VectorStore only

spring.ai.ollama.base-url=http://localhost:11434
spring.ai.model.embedding=ollama
spring.ai.ollama.embedding.options.model=embeddinggemma:300m
spring.ai.ollama.chat.options.model=tinyllama:1.1b
spring.ai.chat.model=ollama

# Allow bean overriding so Spring AI and Spring Data OpenSearch can share OpenSearchConnectionDetails
# No Spring Data Elasticsearch/OpenSearch repositories active

# ---- Logging for Spring AI / Ollama diagnostics ----
# Core Spring AI components
logging.level.org.springframework.ai=DEBUG
logging.level.org.springframework.ai.ollama=DEBUG
logging.level.org.springframework.ai.vectorstore=DEBUG
logging.level.org.springframework.ai.embedding=DEBUG

# HTTP client (Spring WebClient / RestClient underlying Apache HTTP) wire-level
#logging.level.org.springframework.web.client=DEBUG
#logging.level.org.apache.hc.client5.http=DEBUG
#logging.level.org.apache.hc.client5.http.wire=TRACE

# OpenSearch vector store operations
#logging.level.org.springframework.ai.vectorstore.opensearch=DEBUG
logging.level.org.opensearch.client=INFO

# Micrometer observation to see timing around vector store adds/searches
#logging.level.io.micrometer.observation=DEBUG

# Reduce noise from Spring framework internals (adjust if too chatty)
logging.level.org.springframework.core=INFO
logging.level.org.springframework.beans=INFO
logging.level.org.springframework.context=INFO

# Optional: log slow startup / blocking detection for troubleshooting
spring.threads.virtual.enabled=true
